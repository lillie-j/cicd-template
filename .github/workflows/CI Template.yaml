# This workflow is intended for Python projects
# This workflow installs Python dependencies, runs tests,
# lints, security scans and build Docker images.

name: CI Template Process

on:
  workflow_dispatch:

  pull_request:
    branches: [main]

   
env:
  DEPENDENCY_MANAGER: 'uv' # Dependency manager used to manage your project - should be one of 'uv' 'pipenv' or 'venv'
  EXCLUDE_FOLDERS_FROM_SCAN: './tests' # Comma separated list of files to exclude from security scan relative to root e.g. './tests,./src' (.venv automatically excluded)
  EXCLUDE_FOLDERS_FROM_LINTING: 'tests' # Comma separated list of files to exclude from linting NOT relative to root e.g. 'tests,src' (.venv automatically excluded)
  IGNORE_LINTING_FAILURES: 'true' # 'true' to cause linting to always pass, 'false' to cause linting to fail if any issues detected
  CLOUD_REGISTRY: 'aws' # Cloud provider which hosts your image registry - should be one of 'aws' 'azure' or 'none'. If none, will output image as a .tar.gz artifact,
  BUILD_PLATFORM: 'linux/amd64' # Platform to build your image for - must be supported by Docker

  # AWS/ECR - Comment out if CLOUD_REGISTRY = 'aws'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

  # Azure/ACR - Comment out if CLOUD_REGISTRY = 'azure' - WIP

jobs:
  Setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect Python Version
        id: python
        uses: ./.github/actions/detect_python
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.python.outputs.version }}

      - name: Install Dependencies
        uses: ./.github/actions/install_dependencies
        with:
          dependency-manager: ${{ env.DEPENDENCY_MANAGER }} 
        

  Test:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore environment
        uses: ./.github/actions/restore_env_from_cache
        with:
          dependency-manager: ${{ env.DEPENDENCY_MANAGER }} 

      - name: Run Tests
        uses: ./.github/actions/test


  Security-Scan:
    needs: Setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: ["python"]
    permissions:
     security-events: write
     actions: read
     contents: read
     
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deps
        run: |
          python-m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended
          python-taint-model: local-source

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3




  Lint:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore environment
        uses: ./.github/actions/restore_env_from_cache
        with:
          dependency-manager: ${{ env.DEPENDENCY_MANAGER }} 
      
      - name: Lint
        uses: ./.github/actions/lint
        with:
          folders-to-exclude: ${{ env.EXCLUDE_FOLDERS_FROM_LINTING }} 
          ignore-failures: ${{ env.IGNORE_LINTING_FAILURES }} 

       
  Docker_Build:
    needs: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        context: ["./src/backend","./src/frontend"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Image
        uses: ./.github/actions/build
        with:
          docker-context-path: ${{ matrix.context }}
          cloud-registry: ${{ env.CLOUD_REGISTRY }}
          build-platform: ${{ env.BUILD_PLATFORM }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AZURE_CLIENT_ID:
          AZURE_TENANT_ID:
          AZURE_SUBSCRIPTION_ID:
          AZURE_CLIENT_SECRET:

